#!/usr/bin/env python3

from pwn import *
import binascii
import sys
import os
import xml.etree.ElementTree as ET

class Part:
    def __init__(self, data, auto_file_mode=False):
        self.__parse_part(data, auto_file_mode)

    def __parse_part(self, data, auto_file_mode):
        self.binary = u32(data[0:4])
        self.device = u32(data[4:8])

        self.id = u32(data[8:12])

        self.attribute = u32(data[12:16])
        self.update = u32(data[16:20])

        self.blkstart = u32(data[20:24])
        self.blknum = u32(data[24:28])
        self.offset = u32(data[28:32])
        self.filesize = u32(data[32:36])

        self.name = data[36:68].replace(b'\x00', b'').decode('utf8')
        self.filename = data[68:100].replace(b'\x00', b'').decode('utf8')
        self.deltaname = data[100:].replace(b'\x00', b'').decode('utf8')

        # Check for autofile mode and adjust filename if needed
        if auto_file_mode and not os.path.isfile(self.filename):
            self.filename = ""  # Set filename to empty if the file doesn't exist

class PIT:
    def __init__(self, data, auto_file_mode=False):
        self.__parse_pit(data, auto_file_mode)
        
    def __parse_pit(self, data, auto_file_mode):
        self.magic = u32(data[0:4])
        self.count = u32(data[4:8])
        self.dummy = data[8:28]
        self.partitions = self.__parse_part_info(data[28:], auto_file_mode)
        self.signature = binascii.hexlify(data[-256:]).decode('utf8')

    def __parse_part_info(self, data, auto_file_mode):
        result = []

        for _ in range(self.count):
            part = data[0:132]
            data = data[132:]
            result.append(Part(part, auto_file_mode))

        return result

def create_program_element(part):
    program = ET.Element("program")
    program.set("SECTOR_SIZE_IN_BYTES", "4096")
    program.set("file_sector_offset", "0")
    program.set("filename", part.filename)
    program.set("label", part.name)
    program.set("num_partition_sectors", str(part.blknum))
    program.set("partofsingleimage", "false")
    program.set("physical_partition_number", str(part.offset))
    program.set("readbackverify", "false")
    
    # Calculate size in KB using num_partition_sectors
    size_in_KB = (part.blknum * 4096) / 1024
    program.set("size_in_KB", str(size_in_KB))
    
    # Set sparse to true for specific partition names (case insensitive)
    sparse_partitions = {"super", "system", "system_a", "system_b", "userdata", "cache"}
    program.set("sparse", "true" if part.name.lower() in sparse_partitions else "false")
    
    program.set("start_byte_hex", hex(part.blkstart * 4096))
    program.set("start_sector", str(part.blkstart))

    return program

def append_or_create_xml(lun_filename, part):
    if os.path.exists(lun_filename):
        tree = ET.parse(lun_filename)
        root = tree.getroot()
    else:
        root = ET.Element("data")
        root.append(ET.Comment("NOTE: This is an ** Autogenerated file **"))
        root.append(ET.Comment("NOTE: Sector size is 4096bytes"))

    program = create_program_element(part)
    root.append(program)

    tree = ET.ElementTree(root)
    tree.write(lun_filename, encoding="utf-8", xml_declaration=True)

# Main function to handle command line arguments
def main():
    argv = sys.argv
    auto_file_mode = "--autofile" in argv

    if len(argv) != 2 and not auto_file_mode:
        print(argv[0] + " [pit_file] [--autofile]")
        sys.exit(0)

    pit_file = argv[1] if not auto_file_mode else argv[2]

    with open(pit_file, 'rb') as fh:
        data = fh.read()

    pit = PIT(data, auto_file_mode)

    print("Magic: " + hex(pit.magic))
    print("Count: " + str(pit.count))

    for i in range(pit.count):
        part = pit.partitions[i]
        print("---------------------")
        print("Partition ID: " + str(part.id))
        print("Name: " + part.name)
        print("File Name: " + part.filename)
        print("Delta Name: " + part.deltaname)
        print("Binary: " + str(part.binary))
        print("Device: " + str(part.device))
        print("Blkstart: " + str(part.blkstart))
        print("Blknum: " + str(part.blknum))
        print("Offset (LUN): " + str(part.offset))
        print("Filesize: " + str(part.filesize))

        lun_filename = f"rawprogram{part.offset}.xml"
        append_or_create_xml(lun_filename, part)
        print(f"Updated {lun_filename}")

    print("---------------------")
    print("Signature: " + pit.signature)

if __name__ == "__main__":
    main()
